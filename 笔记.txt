www.limingnihao.iteye.com/blog/781671
1、Result Maps collection already contains value for .......
        在mapper.xml文件里写入了重复的id
2、对于result的配置，collection 一定要写别名！否则只能查出来一条：
select u.name,c.cup_name,b.box_name from user u left join box b on b.user_id = u.id left join cup c on c.id = u.cup
3、discriminator （如果CALSS_ID 为 20000001的才加载StudentEntity类）
<resultMap type="liming.student.manager.data.model.StudentEntity" id="resultMap_studentEntity_discriminator">
	<id 	property="studentId" 		column="STUDENT_ID" javaType="String" jdbcType="VARCHAR"/>
	<result property="studentName"  column="STUDENT_NAME" javaType="String" jdbcType="VARCHAR"/>
	<result property="studentSex" 		column="STUDENT_SEX"  javaType="int" jdbcType="INTEGER"/>
	<result property="studentBirthday" 	column="STUDENT_BIRTHDAY"  javaType="Date" jdbcType="DATE"/>
	<result property="studentPhoto" 	column="STUDENT_PHOTO" javaType="byte[]" jdbcType="BLOB" typeHandler="org.apache.ibatis.type.BlobTypeHandler" />
	<result property="placeId" 			column="PLACE_ID" javaType="String" jdbcType="VARCHAR"/>
	<discriminator column="CLASS_ID" javaType="String" jdbcType="VARCHAR">
		<case value="20000001" resultType="liming.student.manager.data.model.StudentEntity" >
			<result property="classId" column="CLASS_ID" javaType="String" jdbcType="VARCHAR"/>
		</case>
	</discriminator>
</resultMap>
4、select update insert 参数：
 基本数据类型，String，int，date等。
Java实体类型参数
Map参数：
    配置
<!-- 查询学生list，=性别，参数map类型 -->  
<select id="getStudentListWhereMap" parameterType="Map" resultMap="studentResultMap">  
    SELECT * from STUDENT_TBL ST  
     WHERE ST.STUDENT_SEX = #{sex}  
          AND ST.STUDENT_SEX = #{sex}  
</select>       
java程序
Map<String, String> map = new HashMap<String, String>();  
map.put("sex", "女");  
map.put("name", "李");  
List<StudentEntity> studentList = studentMapper.getStudentListWhereMap(map);  
for (StudentEntity entityTemp : studentList) {  
    System.out.println(entityTemp.toString());  
}  
5、缓存：
      MyBatis 包含一个强在的、可配置、可定制的缓存机制。MyBatis 3 的缓存实现有了许多改进，既强劲也更容易配置。默认的情况，缓存是没有开启，除了会话缓存以外，它可以提高性能，且能解决全局依赖。开启二级缓存，你只需 要在SQL 映射文件中加入简单的一行：<cache/>

这句简单的语句的作用如下：

1. 所有在映射文件里的select 语句都将被缓存。
2. 所有在映射文件里insert,update 和delete 语句会清空缓存。
3. 缓存使用“最近很少使用”算法来回收
4. 缓存不会被设定的时间所清空。
5. 每个缓存可以存储1024 个列表或对象的引用（不管查询出来的结果是什么）。
6. 缓存将作为“读/写”缓存，意味着获取的对象不是共享的且对调用者是安全的。不会有其它的调用
7. 者或线程潜在修改。



例如，创建一个FIFO 缓存让60 秒就清空一次，存储512 个对象结果或列表引用，并且返回的结果是只读。因为在不用的线程里的两个调用者修改它们可能会导致引用冲突。

Xml代码 
<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true">  
</cache>  
    还可以在不同的命名空间里共享同一个缓存配置或者实例。在这种情况下，你就可以使用cache-ref 来引用另外一个缓存。

Xml代码
<cache-ref namespace="com.liming.manager.data.StudentMapper"/> 


6、动态sql
（1）传对象，则可以用属性
<select id="findById" parameterType="DemoUser" resultType="DemoUser" resultMap="firstResultMap">
	        <if test="id != null"> 
	            select <include refid="selectThings"/> from user where id=#{id}
	         </if>
	        <if test="id == null">
	            select id from user
	        </if> 
        </select> 
（2）传基础类型
    <select id="findById" parameterType="Long" resultType="DemoUser" resultMap="firstResultMap">
	        <if test="_parameter != null"> 
	            select <include refid="selectThings"/> from user where id=#{id}
	         </if>
	        <if test=" _parameter  == null">
	            select id from user
	        </if> 
        </select> 
（3）set 
当update语句中没有使用if标签时，如果有一个参数为null，都会导致错误。
当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。

 使用if+set标签修改后，如果某项为null则不进行更新，而是保持数据库原值。如下示例：

<!-- 4 if/set(判断参数) - 将实体类不为空的属性更新 -->  
<update id="updateStudent_if_set" parameterType="liming.student.manager.data.model.StudentEntity">  
    UPDATE STUDENT_TBL  
    <set>  
        <if test="studentName != null and studentName != '' ">  
            STUDENT_TBL.STUDENT_NAME = #{studentName},  
        </if>  
        <if test="studentSex != null and studentSex != '' ">  
            STUDENT_TBL.STUDENT_SEX = #{studentSex},  
        </if>  
        <if test="studentBirthday != null ">  
            STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},  
        </if>  
        <if test="studentPhoto != null ">  
            STUDENT_TBL.STUDENT_PHOTO = #{studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler},  
        </if>  
        <if test="classId != '' ">  
            STUDENT_TBL.CLASS_ID = #{classId}  
        </if>  
        <if test="placeId != '' ">  
            STUDENT_TBL.PLACE_ID = #{placeId}  
        </if>  
    </set>  
    WHERE STUDENT_TBL.STUDENT_ID = #{studentId};      
</update>  

